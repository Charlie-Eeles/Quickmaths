{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","interval","secondCount","correctAnswer","specificTable","table","multiplication","gameOn","potentialAnswer","scoreCounter","includeDivision","randomSymbol","createHighScore","clearIntervalFunc","clearInterval","gameFunc","x","tableVariable","Math","floor","random","setState","setVariables","correctAnswerVariable","multiplicationVariable","biggerNumber","max","smallerNumber","min","id","this","class","type","onChange","e","valFloat","parseFloat","target","value","highscore","parseInt","localStorage","getItem","setItem","setHighscore","onClick","window","location","reload","maxFloat","minFloat","isNaN","stateFloat","name","for","setInterval","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.28389db9.chunk.js","sourcesContent":["import './App.css';\r\nimport React, { Component } from \"react\";\r\n\r\nclass App extends Component{\r\n\r\n  state = {\r\n    interval: 1,\r\n    secondCount: 0,\r\n    correctAnswer: false,\r\n    specificTable: false,\r\n    table: 12,\r\n    multiplication: 0,\r\n    gameOn:false,\r\n    potentialAnswer: 0,\r\n    scoreCounter: 0,\r\n    includeDivision: false,\r\n    randomSymbol: 0,\r\n    createHighScore: false\r\n  }\r\n\r\n  render(){\r\n\r\n    const setTable = (e) => {\r\n      const valFloat = parseFloat(e.target.value);\r\n      const maxFloat = parseFloat(e.target.max);\r\n      const minFloat = parseFloat(e.target.min);\r\n\r\n      if(isNaN(valFloat)){e.target.value = minFloat || 0}\r\n      if(valFloat > maxFloat){\r\n          const stateFloat = parseFloat(this.state.table);\r\n          if(stateFloat && stateFloat < maxFloat){\r\n          e.target.value = stateFloat + 1;\r\n          }\r\n          else{\r\n          e.target.value = maxFloat;  \r\n          }\r\n      }\r\n      \r\n      if(valFloat < minFloat){\r\n          e.target.value = minFloat;\r\n      }\r\n\r\n      if(valFloat>1 && valFloat<=20){\r\n        this.setState({table: valFloat, specificTable:true})\r\n      }\r\n      // This controls the limits of the table, if the entered table is \r\n      // outside the range it'll act as if one wasn't set.\r\n      // increase the max number and \"max\" tag on the table input \r\n      // to change the table limits.\r\n\r\n      else{\r\n        this.setState({specificTable:false})\r\n      }\r\n    }\r\n\r\n    const handleAnswer = (e) => {\r\n      const valFloat = parseFloat(e.target.value);\r\n\r\n      this.setState({potentialAnswer: valFloat})\r\n\r\n      if(this.state.correctAnswer === valFloat && this.state.correctAnswer !== false){\r\n        gameFunc(true);\r\n        e.target.value=\"\"\r\n      }\r\n    }\r\n\r\n    const timerFunc = () =>{\r\n      if(this.state.secondCount <=0){\r\n        if(!this.state.specificTable && this.state.includeDivision){this.setState({createHighScore: true})}\r\n        \r\n        this.setState({\r\n          secondCount: 5, \r\n          gameOn: true, \r\n          interval : setInterval(()=> {this.setState({secondCount: this.state.secondCount-1})}, 1000)\r\n        })\r\n        gameFunc()\r\n      }\r\n    }\r\n\r\n    const clearIntervalFunc = () =>{\r\n      if(this.state.secondCount<=0){\r\n        clearInterval(this.state.interval)\r\n      }\r\n    }\r\n\r\n    const gameFunc = (x) =>{\r\n      let randomSymbol;\r\n      let tableVariable;\r\n\r\n      if(this.state.includeDivision){\r\n        randomSymbol = Math.floor(Math.random() * 2)\r\n      }\r\n      else{randomSymbol = 0}\r\n      \r\n      if(randomSymbol === 0){\r\n        this.setState({randomSymbol: \"*\"})\r\n      }\r\n      else{\r\n        this.setState({randomSymbol: \"/\"})\r\n      }\r\n      \r\n\r\n      if(this.state.specificTable){\r\n        tableVariable = this.state.table;\r\n      }\r\n      else{\r\n        tableVariable = Math.floor(Math.random() * 12);\r\n        tableVariable++;\r\n        this.setState({table: tableVariable})\r\n      }\r\n\r\n\r\n      const setVariables = () => {\r\n        let multiplicationVariable = Math.floor(Math.random() * 12);\r\n        multiplicationVariable++;\r\n        let correctAnswerVariable;\r\n\r\n        if(randomSymbol === 0){\r\n          correctAnswerVariable = multiplicationVariable * tableVariable;\r\n        }\r\n        else{\r\n          let biggerNumber = Math.max(multiplicationVariable, tableVariable);\r\n          let smallerNumber = Math.min(multiplicationVariable, tableVariable);\r\n\r\n          while(biggerNumber % smallerNumber !== 0){\r\n            multiplicationVariable = Math.floor(Math.random() * 12);\r\n            multiplicationVariable++;\r\n            smallerNumber = Math.min(multiplicationVariable, tableVariable);\r\n            biggerNumber = Math.max(multiplicationVariable, tableVariable);\r\n          }\r\n          // The while loop makes it so it'll only produce quotients with no remainder. \r\n          // If you remove the while loop I'd recommend setting all instances of the correct answer to \r\n          // \"x\" decimal places w/ correctAnswer.toFixed(x)\r\n\r\n          correctAnswerVariable = biggerNumber / smallerNumber\r\n        }\r\n        \r\n        this.setState({correctAnswer: correctAnswerVariable, multiplication: multiplicationVariable})\r\n      }\r\n\r\n      if(!this.state.correctAnswer){\r\n        setVariables();\r\n      }\r\n\r\n\r\n      if(x === true && this.state.secondCount >0){\r\n        setVariables();\r\n        this.setState({secondCount: this.state.secondCount+2, scoreCounter: this.state.scoreCounter+1})\r\n      }\r\n    }\r\n\r\n    const leftNumber = () =>{\r\n      if(this.state.randomSymbol === \"/\"){\r\n        return Math.max(this.state.table, this.state.multiplication)\r\n      }\r\n      else{\r\n        return this.state.table\r\n      }\r\n    }\r\n    const rightNumber = () =>{\r\n      if(this.state.randomSymbol === \"/\"){\r\n        return Math.min(this.state.table, this.state.multiplication)\r\n      }\r\n      else{\r\n        return this.state.multiplication\r\n      }\r\n    }\r\n\r\n    const setHighscore = () =>{\r\n      let highscore = parseInt(localStorage.getItem(\"highscore\"));\r\n\r\n      if(!highscore){localStorage.setItem(\"highscore\", this.state.scoreCounter); return this.state.scoreCounter}\r\n      else if(this.state.scoreCounter > highscore){localStorage.setItem(\"highscore\", this.state.scoreCounter); return this.state.scoreCounter}\r\n      \r\n      return highscore;\r\n    }\r\n\r\n    return (\r\n      \r\n      <div id=\"flex-container\">\r\n        {!this.state.gameOn ?\r\n\r\n          (<div class=\"game-div\">\r\n            \r\n            Table: <input type=\"number\" min=\"1\" max=\"20\" onChange={setTable}></input><br/>\r\n            {/* min and max set the parameters for the input/table , if you change the limit you must also change it in \"setTable\" */}\r\n\r\n            <input type=\"checkbox\" id=\"division\" name=\"include-division\" value=\"include-division\" onClick={()=>{this.setState({includeDivision: !this.state.includeDivision})} }></input>\r\n            <label for=\"include-division\">Include division</label><br/>\r\n\r\n            <button onClick={()=>{timerFunc()}}>Click here to start</button><br/><br/><br/>\r\n            \r\n            High score: {parseInt(localStorage.getItem(\"highscore\")) || 0}<br/>\r\n            To set a high score, you must leave<br/> the table blank and include division!\r\n            {clearIntervalFunc()}\r\n\r\n          </div>):\r\n\r\n          (this.state.secondCount > 0 ?\r\n\r\n          (<div class=\"game-div\">\r\n\r\n            Time:{this.state.secondCount} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Score: {this.state.scoreCounter}<br/><br/>\r\n            {leftNumber()} {this.state.randomSymbol} {rightNumber()} = &nbsp;&nbsp;\r\n            {clearIntervalFunc()}\r\n            <input type=\"number\"onChange={handleAnswer}></input>\r\n\r\n          </div>):\r\n\r\n          (<div class=\"game-div\">\r\n\r\n            Score: {this.state.scoreCounter}<br/>\r\n            {this.state.createHighScore ? <p>High score: {setHighscore()}</p>: <p></p>}\r\n            <button onClick={()=>{window.location.reload()}}>Restart</button>\r\n\r\n          </div>)\r\n\r\n          )\r\n          \r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}